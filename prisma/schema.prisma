// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String     @unique
  emailVerified   DateTime
  image           String?
  hashedPassword  String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  recentSearches  Json[]     @default([])
  followers       User[]     @relation("followers")
  following       User[]     @relation("following")
  playlists       Playlist[] @relation("playlists")
  likedPlaylists  Playlist[] @relation("likedPlaylists")
  likedSongs      Track[]
  likedArtists    Artist[]
  followersUserId String?    @db.ObjectId
  followersUser   User?      @relation("followers", fields: [followersUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  followingUserId String?    @db.ObjectId
  followingsUser  User?      @relation("following", fields: [followingUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Track {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String     @unique
  image        String
  releaseDate  String
  currentRank  Int
  previousRank Int
  artistsIds   String[]   @db.ObjectId
  artists      Artist[]   @relation(fields: [artistsIds], references: [id])
  duration     Int
  genre        String
  playlists    Playlist[] @relation(fields: [playlistsIds], references: [id])
  playlistsIds String[]   @db.ObjectId
  User         User?      @relation(fields: [userId], references: [id])
  userId       String?    @db.ObjectId
}

model Artist {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   @unique
  tracksIds    String[] @db.ObjectId
  tracks       Track[]  @relation(fields: [tracksIds], references: [id])
  image        String
  currentRank  Int
  previousRank Int
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?  @db.ObjectId
}

model Playlist {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  tracks        Track[]  @relation(fields: [tracksIds], references: [id])
  tracksIds     String[] @db.ObjectId
  image         String?
  isPublic      Boolean  @default(true)
  author        String?
  likedUserId   String?  @db.ObjectId
  likedUser     User?    @relation("likedPlaylists", fields: [likedUserId], references: [id])
  createdUserId String?  @db.ObjectId
  createdUser   User?    @relation("playlists", fields: [createdUserId], references: [id])
}
